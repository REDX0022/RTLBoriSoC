; ADD and SUB instruction tests

; Basic addition
@ 0000
ADDI x1 x0 001      ; x1 = 1
ADDI x2 x0 002      ; x2 = 2
ADD  x3 x1 x2       ; x3 = x1 + x2 = 3

; Basic subtraction
SUB  x4 x3 x2       ; x4 = x3 - x2 = 1
SUB  x5 x3 x1       ; x5 = x3 - x1 = 2

; Zero results
SUB  x6 x1 x1       ; x6 = 0
ADD  x7 x0 x0       ; x7 = 0

; Negative results (two's complement)
ADDI x8 x0 FFF      ; x8 = -1 (0xFFFFFFFF)
ADDI x9 x0 FF0      ; x9 = -16 (0xFFFFFFF0)
ADD  x10 x8 x9      ; x10 = -1 + -16 = -17 (0xFFFFFFEF)
SUB  x11 x8 x9      ; x11 = -1 - (-16) = 15 (0x0000000F)

; Overflow (wrap-around)
ADDI x12 x0 7FF     ; x12 = 2047
ADDI x13 x0 7FF     ; x13 = 2047
ADD  x14 x12 x13    ; x14 = 4094 (no overflow)
ADDI x15 x0 800     ; x15 = -2048 (0xFFFFF800, if sign-extended)
ADD  x16 x12 x15    ; x16 = 2047 + (-2048) = -1 (0xFFFFFFFF)

; Underflow (wrap-around)
SUB  x17 x0 x1      ; x17 = 0 - 1 = -1 (0xFFFFFFFF)
SUB  x18 x1 x2      ; x18 = 1 - 2 = -1 (0xFFFFFFFF)
SUB  x19 x2 x1      ; x19 = 2 - 1 = 1

; Large positive + large negative
ADDI x20 x0 800     ; x20 = -2048 (0xFFFFF800)
ADDI x21 x0 7FF     ; x21 = 2047
ADD  x22 x20 x21    ; x22 = -2048 + 2047 = -1 (0xFFFFFFFF)
SUB  x23 x21 x20    ; x23 = 2047 - (-2048) = 4095 (0x00000FFF)

; Register overwrite
ADD  x1 x1 x1       ; x1 = x1 + x1 (should double x1)
SUB  x2 x2 x2       ; x2 = 0

; Chained operations
ADD  x24 x1 x3      ; x24 = x1 + x3
SUB  x25 x24 x1     ; x25 = x24 - x1

; ADD/SUB with zero register
ADD  x26 x0 x1      ; x26 = x1
SUB  x27 x1 x0      ; x27 = x1
ADD  x28 x0 x0      ; x28 = 0
SUB  x29 x0 x0      ; x29 = 0

; ADD/SUB with self
ADD  x30 x1 x1      ; x30 = x1 + x1
SUB  x31 x1 x1      ; x31 = 0